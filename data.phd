{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":13598,"status":"ok","timestamp":1661414156438,"user":{"displayName":"Ujwal Kaur H0","userId":"18001908069265679547"},"user_tz":-330},"id":"K-b3_oxs97Bo","colab":{"base_uri":"https://localhost:8080/"},"outputId":"0d367395-183f-4b6e-8028-c6af3a8e50bd"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[K     |████████████████████████████████| 9.1 MB 5.3 MB/s \n","\u001b[K     |████████████████████████████████| 4.3 MB 41.9 MB/s \n","\u001b[K     |████████████████████████████████| 181 kB 57.4 MB/s \n","\u001b[K     |████████████████████████████████| 164 kB 57.0 MB/s \n","\u001b[K     |████████████████████████████████| 235 kB 56.8 MB/s \n","\u001b[K     |████████████████████████████████| 78 kB 6.6 MB/s \n","\u001b[K     |████████████████████████████████| 63 kB 1.6 MB/s \n","\u001b[K     |████████████████████████████████| 1.6 MB 52.9 MB/s \n","\u001b[K     |████████████████████████████████| 51 kB 6.6 MB/s \n","\u001b[?25h  Building wheel for validators (setup.py) ... \u001b[?25l\u001b[?25hdone\n"]}],"source":["! pip install streamlit -q"]},{"cell_type":"code","execution_count":37,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1661416959041,"user":{"displayName":"Ujwal Kaur H0","userId":"18001908069265679547"},"user_tz":-330},"id":"gkSevGU4-Iwh","outputId":"57500ecd-1722-4861-92be-c8093fd017d2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting mini.py\n"]}],"source":["%%writefile mini.py\n","import streamlit as st\n","\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","from textblob import TextBlob\n","import re\n","\n","# plotting\n","import seaborn as sns\n","from wordcloud import WordCloud\n","import matplotlib.pyplot as plt\n","# nltk\n","from nltk.stem import WordNetLemmatizer\n","# sklearn\n","from sklearn.svm import LinearSVC\n","from sklearn.naive_bayes import BernoulliNB\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.metrics import confusion_matrix, classification_report\n","\n","\n","\n","\n","\n","import sqlite3\n","conn = sqlite3.connect('student_feedback.db')\n","c = conn.cursor()\n","    \n","\n","def create_table():\n","    c.execute('CREATE TABLE IF NOT EXISTS feedback(Q3 INTEGER, Q8 TEXT)')\n","\n","def add_feedback(Q3, Q8):\n","    c.execute('INSERT INTO feedback (Q3, Q8) VALUES (?,?)',(Q3, Q8))\n","    conn.commit()\n","\n","def main():\n","\n","    st.title(\"Student Feedback\")\n","\n","    d = st.date_input(\"Today's date\",None, None, None, None)\n","    \n","    Q1 = st.selectbox('Who was your teacher?',('','Mr Thomson', 'Mr Tang', 'Ms Taylor','Ms Rivas','Mr Hindle','Mr Henderson'))\n","    st.write('You selected:', Q1)\n","    \n","    Q2 = st.slider('What year are you in?', 7,13)\n","    st.write('You selected:', Q2) \n","    \n","    Q3 = st.slider('Overall, how happy are you with the lesson? (5 being very happy and 1 being very dissapointed)', 1,5,1)\n","    st.write('You selected:', Q3)\n","\n","    Q4 = st.selectbox('Was the lesson fun and interactive?',('','Yes', 'No'))\n","    st.write('You selected:', Q4)\n","\n","    Q5 = st.selectbox('Was the lesson interesting and engaging?',('','Yes', 'No'))\n","    st.write('You selected:', Q5)\n","\n","    Q6 = st.selectbox('Were you content with the pace of the lesson?',('','Yes', 'No'))\n","    st.write('You selected:', Q6)\n","\n","    Q7 = st.selectbox('Did your teacher explore the real-world applications of what you learnt?',('','Yes', 'No'))\n","    st.write('You selected:', Q7)\n","\n","    Q8 = st.text_input('What could have been better?', max_chars=50)\n","    if st.button(\"Submit feedback\"):\n","        create_table()\n","   \n","        add_feedback(question_3, question_8)\n","        st.success(\"Feedback submitted\")\n","        query = pd.read_sql_query('''\n","select * from feedback''', conn)\n","\n","   \n","        \n","\n","if __name__ == '__main__':\n","    main()\n","    query = pd.read_sql_query('''\n","select * from feedback''', conn)\n","\n"," \n","\n","\n","data = pd.DataFrame(query)\n","st.write(data)\n","ax = data.groupby('Q3').count().plot(kind='bar', title='Distribution of data',legend=False)\n","ax.set_xticklabels(['Negative','Positive'], rotation=0)\n","# Storing data in lists.\n","Q8, Q3 = list(data['Q8']), list(data['Q3'])\n","sns.countplot(x='Q3', data=data)\n","\n","\n","def Plot_Analysis():\n","  def cleanTxt(data):\n","\t\t\t\t\t data = re.sub('@[A-Za-z0–9]+', '', data) #Removing @mentions\n","\t\t\t\t\t data = re.sub('#', '', data) # Removing '#' hash tag\n","\t\t\t\t\t data = re.sub('RT[\\s]+', '', data) # Removing RT\n","\t\t\t\t\t data = re.sub('https?:\\/\\/\\S+', '', data) # Removing hyperlink\n","\t\t\t\t\t \n","\t\t\t\t\t return data\n","\n","  def getSubjectivity(data):\n","\t\t\t\t\t   return TextBlob(data).sentiment.subjectivity\n","\n","\t\t\t\t\t# Create a function to get the polarity\n","\n","  def getPolarity(data):\n","\t\t\t\t\t   return  TextBlob(data).sentiment.polarity\n","\n","\n","\t\t\t\t\t# Create two new columns 'Subjectivity' & 'Polarity'\n","  data['Subjectivity'] = data['Q8'].apply(getSubjectivity)\n","  data['Polarity'] = data['Q8'].apply(getPolarity)\n","\n","\n","  def getAnalysis(score):\n","    if score < 0:\n","      return 'Negative 😡'\n","    elif score == 0:\n","      return 'Neutral 😐'\n","    else:\n","      return 'Positive 😀'\n","\t\t\t\t\t    \n","  data['Analysis'] = data['Polarity'].apply(getAnalysis)\n","  return data\n","\n","data= Plot_Analysis()\n","st.write(data)\n","\n","\n","st.write(sns.countplot(x=data[\"Analysis\"],data=data))\n","st.set_option('deprecation.showPyplotGlobalUse', False)\n","st.pyplot()\n"," \n","\n","\n","\n","        \n"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":415,"status":"ok","timestamp":1661414174771,"user":{"displayName":"Ujwal Kaur H0","userId":"18001908069265679547"},"user_tz":-330},"id":"s4qT3ook_5ug"},"outputs":[],"source":["##! pip install pyngrok"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":1,"status":"ok","timestamp":1661414176717,"user":{"displayName":"Ujwal Kaur H0","userId":"18001908069265679547"},"user_tz":-330},"id":"x30Vbsr8_63n"},"outputs":[],"source":["# from pyngrok import ngrok"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1661414178510,"user":{"displayName":"Ujwal Kaur H0","userId":"18001908069265679547"},"user_tz":-330},"id":"UiNkmhCIAC_v"},"outputs":[],"source":["# !nohup streamlit run app.py &\n","# url = ngrok.connect(port = '8501')\n","# print (url)"]},{"cell_type":"code","source":[],"metadata":{"id":"10PMVd42KCtD"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":38,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fWSMZ2myAM7Y","executionInfo":{"status":"ok","timestamp":1661417024721,"user_tz":-330,"elapsed":62475,"user":{"displayName":"Ujwal Kaur H0","userId":"18001908069265679547"}},"outputId":"b143602c-ffaa-401f-8778-9199f138589c"},"outputs":[{"output_type":"stream","name":"stdout","text":["2022-08-25 08:42:42.938 INFO    numexpr.utils: NumExpr defaulting to 2 threads.\n","\u001b[K\u001b[?25hnpx: installed 22 in 2.394s\n","your url is: https://many-pianos-peel-34-73-25-53.loca.lt\n","\u001b[0m\n","\u001b[34m\u001b[1m  You can now view your Streamlit app in your browser.\u001b[0m\n","\u001b[0m\n","\u001b[34m  Network URL: \u001b[0m\u001b[1mhttp://172.28.0.2:8501\u001b[0m\n","\u001b[34m  External URL: \u001b[0m\u001b[1mhttp://34.73.25.53:8501\u001b[0m\n","\u001b[0m\n","2022-08-25 08:43:11.725 Uncaught app exception\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.7/dist-packages/streamlit/runtime/scriptrunner/script_runner.py\", line 556, in _run_script\n","    exec(code, module.__dict__)\n","  File \"/content/mini.py\", line 79, in <module>\n","    main()\n","  File \"/content/mini.py\", line 70, in main\n","    add_feedback(question_3, question_8)\n","NameError: name 'question_3' is not defined\n","\u001b[34m  Stopping...\u001b[0m\n","^C\n"]}],"source":["!streamlit run mini.py & npx localtunnel --port 8501"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VS5Ega33FoFq"},"outputs":[],"source":["import sqlite3\n","conn = sqlite3.connect('student_feedback.db')\n","c = conn.cursor()\n","    \n","\n","def create_table():\n","    c.execute('CREATE TABLE IF NOT EXISTS feedback(date_submitted DATE, Q1 TEXT, Q2 TEXT,Q3 TEXT,Q4 TEXT, Q5 TEXT)')\n","\n","def add_feedback(date_submitted,Q1,Q2,Q3,Q4, Q5):\n","    c.execute('INSERT INTO feedback (date_submitted,Q1,Q2,Q3,Q4, Q5) VALUES (?,?,?,?,?)',(date_submitted,Q1,Q2,Q3,Q4, Q5))\n","    conn.commit()\n","\n","def main():\n","\n","    st.title(\"Car Data\")\n","\n","    d = st.date_input(\"Today's date\",None, None, None, None)\n","    \n","    question_1 = st.selectbox('Normal?', ('','Hatchback','Sedan','SUV','MUV'))\n","    st.write('You selected:', question_1)\n","\n","    question_2 = st.selectbox('Sports?', ('','Coupe','Convertibles'))\n","    st.write('You selected:', question_2)\n","    \n","    \n","    question_3 = st.selectbox('Work?', ('','Pickup Trucks','Trucks','Tractor'))\n","    st.write('You selected:', question_3)\n","    \n","    \n","    \n","    question_4 = st.text_input('Car Model?', ('year','Model Version'),max_chars=50)\n","    \n","    \n","\n","    \n","\n","    question_5 = st.text_input('review?', max_chars=50)\n","\n","    if st.button(\"Submit feedback\"):\n","        create_table()\n","        add_feedback(d,question_1,question_2,question_3,question_4, question_5)\n","        st.success(\"Feedback submitted\")\n","\n","if __name__ == '__main__':\n","\tmain()\n"," \n","\n","        # lines I added to display your table\n","query = pd.read_sql_query('''\n","select * from feedback''', conn)\n","\n","data = pd.DataFrame(query)\n","st.write(data)\n","ax = data.groupby('Q3').count().plot(kind='bar', title='Distribution of data',legend=False)\n","ax.set_xticklabels(['Negative','Positive'], rotation=0)\n","# Storing data in lists.\n","Q8, Q3 = list(data['Q8']), list(data['Q3'])\n","sns.countplot(x='Q3', data=data)\n","\n","\n","def Plot_Analysis():\n","  def cleanTxt(data):\n","\t\t\t\t\t data = re.sub('@[A-Za-z0–9]+', '', data) #Removing @mentions\n","\t\t\t\t\t data = re.sub('#', '', data) # Removing '#' hash tag\n","\t\t\t\t\t data = re.sub('RT[\\s]+', '', data) # Removing RT\n","\t\t\t\t\t data = re.sub('https?:\\/\\/\\S+', '', data) # Removing hyperlink\n","\t\t\t\t\t \n","\t\t\t\t\t return data\n","\n","  def getSubjectivity(data):\n","\t\t\t\t\t   return TextBlob(data).sentiment.subjectivity\n","\n","\t\t\t\t\t# Create a function to get the polarity\n","\n","  def getPolarity(data):\n","\t\t\t\t\t   return  TextBlob(data).sentiment.polarity\n","\n","\n","\t\t\t\t\t# Create two new columns 'Subjectivity' & 'Polarity'\n","  data['Subjectivity'] = data['Q8'].apply(getSubjectivity)\n","  data['Polarity'] = data['Q8'].apply(getPolarity)\n","\n","\n","  def getAnalysis(score):\n","    if score < 0:\n","      return 'Negative 😡'\n","    elif score == 0:\n","      return 'Neutral 😐'\n","    else:\n","      return 'Positive 😀'\n","\t\t\t\t\t    \n","  data['Analysis'] = data['Polarity'].apply(getAnalysis)\n","  return data\n","\n","data= Plot_Analysis()\n","st.write(data)\n","\n","\n","st.write(sns.countplot(x=data[\"Analysis\"],data=data))\n","st.set_option('deprecation.showPyplotGlobalUse', False)\n","st.pyplot()\n"," "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":644,"status":"ok","timestamp":1660921268712,"user":{"displayName":"Ujwal Kaur H0","userId":"18001908069265679547"},"user_tz":-330},"id":"5-m-KGmHkD5X","outputId":"87d5a62d-106a-473e-aee3-3d446cfbdcd6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Overwriting main.py\n"]}],"source":["%%writefile main.py\n","import streamlit as st\n","\n","import numpy as np\n","import pandas as pd\n","\n","import sqlite3\n","conn = sqlite3.connect('student_feedback.db')\n","c = conn.cursor()\n","    \n","\n","def create_table():\n","    c.execute('CREATE TABLE IF NOT EXISTS feedback(date_submitted DATE, Q1 TEXT, Q2 INTEGER, Q3 INTEGER, Q4 TEXT, Q5 TEXT, Q6 TEXT, Q7 TEXT, Q8 TEXT)')\n","\n","def add_feedback(date_submitted, Q1, Q2, Q3, Q4, Q5, Q6, Q7, Q8):\n","    c.execute('INSERT INTO feedback (date_submitted,Q1, Q2, Q3, Q4, Q5, Q6, Q7, Q8) VALUES (?,?,?,?,?,?,?,?,?)',(date_submitted,Q1, Q2, Q3, Q4, Q5, Q6, Q7, Q8))\n","    conn.commit()\n","\n","def main():\n","\n","    st.title(\"Student Feedback\")\n","\n","    d = st.date_input(\"Today's date\",None, None, None, None)\n","    \n","    question_1 = st.selectbox('Who was your teacher?',('','Mr Thomson', 'Mr Tang', 'Ms Taylor','Ms Rivas','Mr Hindle','Mr Henderson'))\n","    st.write('You selected:', question_1)\n","    \n","    question_2 = st.slider('What year are you in?', 7,13)\n","    st.write('You selected:', question_2) \n","    \n","    question_3 = st.slider('Overall, how happy are you with the lesson? (5 being very happy and 1 being very dissapointed)', 1,5,1)\n","    st.write('You selected:', question_3)\n","\n","    question_4 = st.selectbox('Was the lesson fun and interactive?',('','Yes', 'No'))\n","    st.write('You selected:', question_4)\n","\n","    question_5 = st.selectbox('Was the lesson interesting and engaging?',('','Yes', 'No'))\n","    st.write('You selected:', question_5)\n","\n","    question_6 = st.selectbox('Were you content with the pace of the lesson?',('','Yes', 'No'))\n","    st.write('You selected:', question_6)\n","\n","    question_7 = st.selectbox('Did your teacher explore the real-world applications of what you learnt?',('','Yes', 'No'))\n","    st.write('You selected:', question_7)\n","\n","    question_8 = st.text_input('What could have been better?', max_chars=50)\n","        \n","    if st.button(\"Submit feedback\"):\n","       create_table()\n","       add_feedback(d, question_1, question_2, question_3, question_4, question_5, question_6, question_7, question_8)\n","       st.success(\"Feedback submitted\")\n","       query = pd.read_sql_query('''\n","       select * from feedback''', conn)\n","\n","       data = pd.DataFrame(query)\n","\n","       st.write(data)\n","\n","    \n","\n","if __name__ == '__main__':\n","    main()\n","    \n","\n","        \n"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"data.phd","provenance":[],"authorship_tag":"ABX9TyMUZUKnuFcWYnHQTL/yBFh9"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}